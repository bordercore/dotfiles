
;; Load support for ELPA (package.el), the package archive.  Emacs 24 includes
;;   this natively.  For earlier versions, package.el needs to be installed manually.
;;   See http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el
(cond
 ((string-match "GNU Emacs 2[23]" (emacs-version))
  (when
	  (load
	   (expand-file-name "~/.emacs.d/elpa/package.el"))
	(package-initialize))
  )
)

(require 'package)

(package-initialize)

(defmacro when-package-installed (package-name &rest body)
  `(if (package-installed-p ,package-name)
	   (progn ,@body)
	 (warn "package %s is not installed" ,package-name)))
(setplist 'when-package-installed '(lisp-indent-function defun))

;; Add the Marmalade external repo to ELPA
(add-to-list 'package-archives
			 '("marmalade" . "http://marmalade-repo.org/packages/") t)

;; Macros
(defun copy-line ()
  "Macro for copying the current line into the buffer."
  (interactive)
  (beginning-of-line)
  (set-mark-command)
  (end-of-line)
  ;(kill-ring-save)
)

(fset 'insert-warn
   [?w ?a ?r ?n ?( ?" ?\\ ?n ?" ?) ?\; left left left left left])

(fset 'my-copy-line
   [?\C-a ?\C-  ?\C-e escape ?w return ?\C-y ?\C-a])

(global-set-key (quote [f1]) 'insert-warn)
(global-set-key (quote [f2]) 'query-replace)
(global-set-key (quote [f3]) 'font-lock-mode)
(global-set-key (quote [f5]) 'my-copy-line)
(global-set-key "\C-x\C-g" 'goto-line)

;; The <home> and <end> keys should move to the beginning
;;  and end of the buffer, respectively
(global-set-key [home] 'beginning-of-buffer)
(global-set-key [end] 'end-of-buffer)

(global-set-key (kbd "C-x <left>") 'windmove-left)   ; move to left windnow
(global-set-key (kbd "C-x <right>") 'windmove-right) ; move to right window
(global-set-key (kbd "C-x <up>") 'windmove-up)       ; move to upper window
(global-set-key (kbd "C-x <down>") 'windmove-down)   ; move to lower window

;; Change 'yes or no' prompt to 'y or n' prompts
(fset 'yes-or-no-p 'y-or-n-p)

(add-hook 'c-mode-common-hook
	  (lambda ()
	    (c-set-style "k&r")
	    (setq c-basic-offset 4)))

;; Stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)

(put 'downcase-region 'disabled nil)

;; Turn on Column Number mode
(setq column-number-mode 1)

;; Turn on Size Indication mode
(setq size-indication-mode 1)

;(global-set-key "\C-h" 'delete-backward-char)
;(global-set-key "\C-?" 'delete-char)

(setq load-path
      (append load-path
	      '("/usr/local/share/emacs/site-lisp")))

;; Third-party packages go here
(add-to-list 'load-path "~/.emacs.d/elisp")

;; Enable mouse scroller on vertical scroll bar
(global-set-key [vertical-scroll-bar mouse-4] 'scroll-down)
(global-set-key [vertical-scroll-bar mouse-5] 'scroll-up)

;; Enable mouse scroller in active window
(global-set-key [mouse-4] 'scroll-down)
(global-set-key [mouse-5] 'scroll-up)

;; makes killing/yanking interact with clipboard X11 selection
(setq x-select-enable-clipboard t)

;; Visual feedback on selections
(setq-default transient-mark-mode t)

;; Set the default tab width to 4
(setq-default tab-width 4)

(setq-default indent-tabs-mode t)

;; Use tabs when indenting code, use spaces for alignment.
;;   Note: this version of smart-tab is *NOT* the one found in ELPA.
;;   See https://github.com/genehack/smart-tab
(require 'smart-tab)
(global-smart-tab-mode 1)

;; However, don't use smart tabs in shell mode
(add-to-list 'smart-tab-disabled-major-modes 'shell-mode)

;; Uniquify changes conflicting buffer names from file<2> etc
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t) ; rename after killing uniquified
(setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers

;; Enable wheelmouse support by default
(cond (window-system
       (mwheel-install)
))

;; Use diff-mode when editing Git commit messages.
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))

;; Use HTML Mode for html, autohandler, and dhandler files
(add-to-list 'auto-mode-alist '("\\.html\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\(auto\\|d\\)handler\\'" . html-mode))

;; cperl-mode indentation offset
(setq cperl-indent-level 4)

;; Use the new defthemes system for Emacs 24...
(cond
 ((string-match "GNU Emacs 24" (emacs-version))
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'manoj-dark)  ;; Choose your color theme here
  )
 )

;; ...use color-theme mode for Emacs 23
;; (cond
;;  ((string-match "GNU Emacs 23" (emacs-version))
;;   (require 'color-theme)
;;   (eval-after-load "color-theme"
;; 	'(progn
;; 	   (color-theme-initialize)
;; 	   (color-theme-arjen)))  ;; Choose your color theme here
;;   )
;;  )

(require 'mmm-mode)
(setq mmm-global-mode 't)
(mmm-add-mode-ext-class 'html-mode "\\.html\\'" 'mason)

;; Don't color submode regions
(setq mmm-submode-decoration-level 0)

;; Load the Emacs Code Browser
;;(require 'ecb)

(add-hook 'nethack-map-mode-hook
	  (lambda ()
	    (define-key nh-map-mode-map (kbd "<left>") 'nethack-command-west)
	    (define-key nh-map-mode-map (kbd "<up>") 'nethack-command-north)
	    (define-key nh-map-mode-map (kbd "<down>") 'nethack-command-south)
	    (define-key nh-map-mode-map (kbd "<right>") 'nethack-command-east)
	    (define-key nh-map-mode-map (kbd "<kp-add>") 'nethack-command-northwest)
	    (define-key nh-map-mode-map (kbd "<prior>") 'nethack-command-northeast)
	    (define-key nh-map-mode-map (kbd "<end>") 'nethack-command-southwest)
	    (define-key nh-map-mode-map (kbd "<next>") 'nethack-command-southeast)
))

(add-to-list 'load-path "~/.emacs.d/elisp/nethack/")
(autoload 'nethack "nethack" "Play Nethack." t)
(setq nethack-program "/usr/games/nethack-lisp")

;; Set the default font
;;(setq initial-frame-alist
;;      '((top . 40) (left . -15)
;;	(width . 80) (height . 40)
;;	(background-color . "Gray94")
;;	(foreground-color . "Black")
;;	(cursor-color . "red3")
;;	(user-position t)
;;	(font . "-bitstream-courier-*-r-*-*-18-*-*-*-*-*-*-*")
;;))

;; turn on font-lock mode in all modes that support it
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t))

;; Automatically use Imenu, as needed
(defun try-to-add-imenu ()
  (condition-case nil (imenu-add-to-menubar "Functions") (error nil)))
(add-hook 'font-lock-mode-hook 'try-to-add-imenu)

;; Imenu: display 50 items in each submenu
(setq imenu-max-items 50)

;; Imenu: sort functions alphabetically
(setq imenu-sort-function 'imenu--sort-by-name)

;; Rescan the buffer automatically for new functions
(setq imenu-auto-rescan t)

;; Always show trailing whitespace
(setq-default show-trailing-whitespace t)

(require 'org)
(setq org-mobile-inbox-for-pull "/home/www/htdocs/bordercore/dav/mobileorg.org/")
(setq org-mobile-directory "/home/www/htdocs/bordercore/dav/")

;; Use visual-line-mode everywhere
(global-visual-line-mode 1)

;; The return key creates a new heading by default
(define-key org-mode-map (kbd "RET") 'org-meta-return)

;; Turn on org-indent-mode for all files
(setq org-startup-indented t)

;; Don't insert blank lines before new entries/items
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))

;; Add an intermediate 'IN PROGRESS' todo state
(setq org-todo-keywords
      '((sequence "TODO" "IN PROGRESS" "|" "DONE")))

;; disable the startup screen
(setq inhibit-startup-screen t)

;; create a list of recently opened files
(require 'recentf)
(recentf-mode 1)

;; for re-builder mode, set the syntax to 'string' to avoid extra escaping
(setq reb-re-syntax 'string)

;; backup file management
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist
 '(("." . "~/.saves"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups

;; save my place in files between sessions
(setq save-place-file "~/.emacs.d/saveplace") ;; keep my ~/ clean
(setq-default save-place t)                   ;; activate it for all buffers
(require 'saveplace)                          ;; get the package


;; support for Magit, which provides nice Git integration with Emacs
(when-package-installed 'magit
						(require 'magit))

;; Use apache-mode when editing Apache config files
(autoload 'apache-mode "apache-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
(add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  . apache-mode))

;; Use cperl-mode when editing Perl files
(add-to-list 'auto-mode-alist '("\\.pl\\'" . cperl-mode))
(add-to-list 'auto-mode-alist '("\\.pm\\'" . cperl-mode))

;; Use Rainbow minor mode when in CSS mode
(add-hook 'css-mode-hook 'rainbow-mode)

;; On "OS X", set the default font to "Monaco 18"
(when (equal system-type 'darwin)
  (set-face-attribute 'default nil :font "Monaco 18")
  )

;; hilight matching pairs of parentheses and other characters
(show-paren-mode 1)

(defadvice show-paren-function
  (after show-matching-paren-offscreen activate)
  "If the matching paren is offscreen, show the matching line in the
        echo area. Has no effect if the character before point is not of
        the syntax class ')'."
  (interactive)
  (if (not (minibuffer-prompt))
	  (let ((matching-text nil))
		;; Only call `blink-matching-open' if the character before point
		;; is a close parentheses type character. Otherwise, there's not
		;; really any point, and `blink-matching-open' would just echo
		;; "Mismatched parentheses", which gets really annoying.
		(if (char-equal (char-syntax (char-before (point))) ?\))
			(setq matching-text (blink-matching-open)))
		(if (not (null matching-text))
			(message matching-text)))))

;; GUI stuff
(when window-system
  (mouse-wheel-mode t)	  ; enable mouse wheel support
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (tooltip-mode t)        ; show tooltips
  (tool-bar-mode -1)      ; don't show the toolbar
  (blink-cursor-mode -1)  ; don't blink the cursor
  )

;; Init ido
(ido-mode t)
(setq ido-enable-prefix nil
	  ido-enable-flex-matching t
	  ido-create-new-buffer 'always
	  ido-max-prospects 10)

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;; Set the 'org-hide' face to match the background color of your theme
;;  so that leading stars are hidden in your outlines.

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-hide ((t (:foreground "#2E3436")))))
