
;; Load support for ELPA (package.el), the package archive.  Emacs 24 includes
;;   this natively.  For earlier versions, package.el needs to be installed manually.
;;   See http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el
(cond
 ((string-match "GNU Emacs 2[23]" (emacs-version))
  (when
	  (load
	   (expand-file-name "~/.emacs.d/elpa/package.el"))
	(package-initialize))
  )
)

(require 'package)

(package-initialize)

(defmacro when-package-installed (package-name &rest body)
  `(if (package-installed-p ,package-name)
	   (progn ,@body)
	 (warn "package %s is not installed" ,package-name)))
(setplist 'when-package-installed '(lisp-indent-function defun))

;; Add the Marmalade external repo to ELPA
(add-to-list 'package-archives
			 '("marmalade" . "http://marmalade-repo.org/packages/") t)

;; Macros
(defun copy-line ()
  "Macro for copying the current line into the buffer."
  (interactive)
  (beginning-of-line)
  (set-mark-command)
  (end-of-line)
  ;(kill-ring-save)
)

;; Revert the buffer without confirmation.  I usually bind this to F5.
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t))

(fset 'my-copy-line
   [?\C-a ?\C-  ?\C-e escape ?w return ?\C-y ?\C-a])

(global-set-key (quote [f2]) 'query-replace)
(global-set-key (quote [f3]) 'font-lock-mode)
(global-set-key (quote [f5]) 'revert-buffer-no-confirm)
(global-set-key "\C-x\C-g" 'goto-line)

;; The <home> and <end> keys should move to the beginning
;;  and end of the buffer, respectively
(global-set-key [home] 'beginning-of-buffer)
(global-set-key [end] 'end-of-buffer)

(global-set-key (kbd "C-x <left>") 'windmove-left)   ; move to left windnow
(global-set-key (kbd "C-x <right>") 'windmove-right) ; move to right window
(global-set-key (kbd "C-x <up>") 'windmove-up)       ; move to upper window
(global-set-key (kbd "C-x <down>") 'windmove-down)   ; move to lower window

;; Change 'yes or no' prompt to 'y or n' prompts
(fset 'yes-or-no-p 'y-or-n-p)

(add-hook 'c-mode-common-hook
	  (lambda ()
	    (c-set-style "k&r")
	    (setq c-basic-offset 4)))

;; Stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)

(put 'downcase-region 'disabled nil)

;; Turn on Column Number mode
(setq column-number-mode 1)

;; Turn on Size Indication mode
(setq size-indication-mode 1)

;(global-set-key "\C-h" 'delete-backward-char)
;(global-set-key "\C-?" 'delete-char)

(setq load-path
      (append load-path
	      '("/usr/local/share/emacs/site-lisp")))

;; Third-party packages go here
(add-to-list 'load-path "~/.emacs.d/elisp")

;; Enable mouse scroller on vertical scroll bar
(global-set-key [vertical-scroll-bar mouse-4] 'scroll-down)
(global-set-key [vertical-scroll-bar mouse-5] 'scroll-up)

;; Enable mouse scroller in active window
(global-set-key [mouse-4] 'scroll-down)
(global-set-key [mouse-5] 'scroll-up)

;; makes killing/yanking interact with clipboard X11 selection
(setq x-select-enable-clipboard t)

;; Visual feedback on selections
(setq-default transient-mark-mode t)

;; Set the default tab width to 4
(setq-default tab-width 4)

(setq-default indent-tabs-mode t)

;; Use tabs when indenting code, use spaces for alignment.
;;   Note: this version of smart-tab is *NOT* the one found in ELPA.
;;   See https://github.com/genehack/smart-tab
(require 'smart-tab)
(global-smart-tab-mode 1)

;; However, don't use smart tabs in shell mode
(add-to-list 'smart-tab-disabled-major-modes 'shell-mode)

;; Uniquify changes conflicting buffer names from file<2> etc
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t) ; rename after killing uniquified
(setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers

;; By default sort the buffer list by column 'Mode'
(setq Buffer-menu-sort-column 4)

;; Enable wheelmouse support by default
(cond (window-system
       (mwheel-install)
))

;; Use diff-mode when editing Git commit messages.
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))

;; Use HTML Mode for html, autohandler, and dhandler files
(add-to-list 'auto-mode-alist '("\\.html\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\(auto\\|d\\)handler\\'" . html-mode))

;; cperl-mode indentation offset
(setq cperl-indent-level 4)

(require 'mmm-mode)
(setq mmm-global-mode 't)
(mmm-add-mode-ext-class 'html-mode "\\.html\\'" 'mason)

;; Don't color submode regions
(setq mmm-submode-decoration-level 0)

;; Load the Emacs Code Browser
;;(require 'ecb)

(add-hook 'nethack-map-mode-hook
	  (lambda ()
	    (define-key nh-map-mode-map (kbd "<left>") 'nethack-command-west)
	    (define-key nh-map-mode-map (kbd "<up>") 'nethack-command-north)
	    (define-key nh-map-mode-map (kbd "<down>") 'nethack-command-south)
	    (define-key nh-map-mode-map (kbd "<right>") 'nethack-command-east)
	    (define-key nh-map-mode-map (kbd "<kp-add>") 'nethack-command-northwest)
	    (define-key nh-map-mode-map (kbd "<prior>") 'nethack-command-northeast)
	    (define-key nh-map-mode-map (kbd "<end>") 'nethack-command-southwest)
	    (define-key nh-map-mode-map (kbd "<next>") 'nethack-command-southeast)
))

(add-to-list 'load-path "~/.emacs.d/elisp/nethack/")
(autoload 'nethack "nethack" "Play Nethack." t)
(setq nethack-program "/usr/games/nethack-lisp")

;; turn on font-lock mode in all modes that support it
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t))

;; Flash the frame to represent a bell rather than play a sound
(setq visible-bell 1)

;; Automatically use Imenu, as needed
(defun try-to-add-imenu ()
  (condition-case nil (imenu-add-to-menubar "Functions") (error nil)))
(add-hook 'font-lock-mode-hook 'try-to-add-imenu)

;; Imenu: display 50 items in each submenu
(setq imenu-max-items 50)

;; Imenu: sort functions alphabetically
(setq imenu-sort-function 'imenu--sort-by-name)

;; Rescan the buffer automatically for new functions
(setq imenu-auto-rescan t)

;; Always show trailing whitespace
(setq-default show-trailing-whitespace t)

(require 'org)
(setq org-mobile-inbox-for-pull "/home/www/htdocs/bordercore/dav/mobileorg.org/")
(setq org-mobile-directory "/home/www/htdocs/bordercore/dav/")

;; Use visual-line-mode everywhere
(global-visual-line-mode 1)

;; Define a function which toggles the return key binding between
;; 'org-return' and 'org-insert-respect-content'
(defun toggle-org-return-key ()
  (interactive)
  (if (string= (key-binding (kbd "RET")) "org-return")
	  (define-key org-mode-map (kbd "RET") 'org-insert-heading-respect-content)
	(define-key org-mode-map (kbd "RET") 'org-return))
  )

(global-set-key (quote [f1]) 'toggle-org-return-key)

;; By default, the return key inserts a new heading
(add-hook 'org-mode-hook
  (lambda ()
    (define-key org-mode-map (kbd "RET") 'org-insert-heading-respect-content)))

;; Turn on org-indent-mode for all files
(setq org-startup-indented t)

;; Don't insert blank lines before new entries/items
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))

;; Add an intermediate 'IN PROGRESS' todo state
(setq org-todo-keywords
      '((sequence "TODO" "IN PROGRESS" "|" "DONE")))

;; Hit <RETURN> to follow the link at point
(setq org-return-follows-link t)

;; TODO statistics covers all entries in the subtree, not just direct children
(setq org-hierarchical-todo-statistics nil)

(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
	(org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

;; Some initial langauges we want org-babel to support
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
   (python . t)
   (R . t)
   (ruby . t)
   (ditaa . t)
   (dot . t)
   (octave . t)
   (sql . t)
   (sqlite . t)
   (perl . t)
   ))

;; Use bash (rather than the default sh) as the command to invoke a shell
(setq org-babel-sh-command "bash")

;; Turn on native code fontification
(setq org-src-fontify-natively t)

;; Don't confirm before evaluating code
(setq org-confirm-babel-evaluate nil)

;; disable the startup screen
(setq inhibit-startup-screen t)

;; create a list of recently opened files
(require 'recentf)
(recentf-mode 1)

;; for re-builder mode, set the syntax to 'string' to avoid extra escaping
(setq reb-re-syntax 'string)

;; backup file management
(defvar backup-dir (expand-file-name ".backups" user-emacs-directory))

(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist (list (cons "." backup-dir))
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups

;; save my place in files between sessions
(require 'saveplace)                          ;; get the package
;;(setq save-place-file "~/.emacs.d/saveplace") ;; keep my ~/ clean
(setq save-place-file (expand-file-name ".saveplaces" user-emacs-directory))

(setq-default save-place t)                   ;; activate it for all buffers


;; support for Magit, which provides nice Git integration with Emacs
(when-package-installed 'magit
						(require 'magit))

;; Custom key binding for the often-used "magit-status" command
(global-set-key (kbd "C-x g") 'magit-status)

;; full screen magit-status
;; http://whattheemacsd.com/setup-magit.el-01.html
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))

(define-key magit-status-mode-map (kbd "q") 'magit-quit-session)

;; git-gutter mode
(require 'git-gutter)

;; Enable git-gutter as a global minor mode
(global-git-gutter-mode t)

;; If you enable git-gutter-mode for some modes
;; (add-hook 'python-mode-hook 'git-gutter-mode)

(global-set-key (kbd "C-x C-g") 'git-gutter:toggle)
(global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)

;; Jump to next/previous hunk
(global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
(global-set-key (kbd "C-x n") 'git-gutter:next-hunk)

;; Revert current hunk
(global-set-key (kbd "C-x r") 'git-gutter:revert-hunk)


;; Use apache-mode when editing Apache config files
(autoload 'apache-mode "apache-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
(add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  . apache-mode))

;; Use cperl-mode when editing Perl files
(add-to-list 'auto-mode-alist '("\\.pl\\'" . cperl-mode))
(add-to-list 'auto-mode-alist '("\\.pm\\'" . cperl-mode))

;; Use Rainbow minor mode when in CSS mode
(add-hook 'css-mode-hook 'rainbow-mode)

;; Hilight Postgres keywords in SQL mode
(add-hook 'sql-mode-hook
          (lambda ()
            (sql-highlight-postgres-keywords)))

;; On "OS X", set the default font to "Monaco 18"
(when (equal system-type 'darwin)
  (set-face-attribute 'default nil :font "Monaco 18")
  )

;; hilight matching pairs of parentheses and other characters
(show-paren-mode 1)

(defadvice show-paren-function
  (after show-matching-paren-offscreen activate)
  "If the matching paren is offscreen, show the matching line in the
        echo area. Has no effect if the character before point is not of
        the syntax class ')'."
  (interactive)
  (if (not (minibuffer-prompt))
	  (let ((matching-text nil))
		;; Only call `blink-matching-open' if the character before point
		;; is a close parentheses type character. Otherwise, there's not
		;; really any point, and `blink-matching-open' would just echo
		;; "Mismatched parentheses", which gets really annoying.
		(if (char-equal (char-syntax (char-before (point))) ?\))
			(setq matching-text (blink-matching-open)))
		(if (not (null matching-text))
			(message matching-text)))))

;; GUI stuff
(when window-system
  (mouse-wheel-mode t)	  ; enable mouse wheel support
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (tooltip-mode t)        ; show tooltips
  (tool-bar-mode -1)      ; don't show the toolbar
  (blink-cursor-mode -1)  ; don't blink the cursor
  )

;; Automatically save and restore sessions
(desktop-save-mode 1)
;; Store the session file here
(setq desktop-dirname "~/.emacs.d/")
(setq desktop-path (list desktop-dirname))

;; Save mini-buffer history between sessions
(setq savehist-additional-variables        ;; also save...
	  '(search-ring regexp-search-ring)    ;; ... my search entries
	  savehist-file "~/.emacs.d/savehist") ;; keep my home clean
(savehist-mode t)                          ;; do customization before activate

;; Init ido
(ido-mode t)
(setq ido-enable-prefix nil
	  ido-enable-flex-matching t
	  ido-create-new-buffer 'always
	  ido-max-prospects 10)

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;; hilight the current line in dired mode
(add-hook 'dired-mode-hook
		  'hl-line-mode)

;; A list of directories containing TAGS files
(setq tags-table-list
	  '("~/dev"))

;; Use color-theme mode for Emacs 23
(cond
 ((string-match "GNU Emacs 23" (emacs-version))
  (require 'color-theme)
  (eval-after-load "color-theme"
	'(progn
	   (color-theme-initialize)
	   (color-theme-arjen)))  ;; Choose your color theme here
  )
 )

;; I store my custom color themes here
(setq custom-theme-directory "~/.emacs.d/themes/")

;; Cut and Copy acts on the entire line if not text is selected.  See:
;; http://emacsblog.org/2009/05/18/copying-lines-not-killing/#comments
;; http://www.emacswiki.org/emacs-fr/WholeLineOrRegion

(defadvice kill-ring-save (around slick-copy activate)
  "When called interactively with no active region, copy a single line instead."
  (if (or (use-region-p) (not (called-interactively-p)))
	  ad-do-it
	(kill-new (buffer-substring (line-beginning-position)
								(line-beginning-position 2))
			  nil '(yank-line))
	(message "Copied line")))
(defadvice kill-region (around slick-copy activate)
  "When called interactively with no active region, kill a single line instead."
  (if (or (use-region-p) (not (called-interactively-p)))
	  ad-do-it
	(kill-new (filter-buffer-substring (line-beginning-position)
									   (line-beginning-position 2) t)
			  nil '(yank-line))))
(defun yank-line (string)
  "Insert STRING above the current line."
  (beginning-of-line)
  (unless (= (elt string (1- (length string))) ?\n)
	(save-excursion (insert "\n")))
  (insert string))

;; Insert parentheses, braces, quotes and the like in matching pairs
(cond
 ((string-match "GNU Emacs 24" (emacs-version))
  (electric-pair-mode)
  )
 )

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; Local settings are stored here, for example the current Emacs 24 color theme.
(load-file "~/.emacs-local")

;; Be sure this loads *after* any color themes are loaded from ~/.emacs-local above
(load "~/.emacs-modeline")
