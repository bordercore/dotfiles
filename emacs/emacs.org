#+TITLE: Emacs Config File
#+AUTHOR: F. Jerrell Schivers
#+EMAIL: jerrell@bordercore.com

Inspired by http://pages.sachachua.com/.emacs.d/Sacha.html

* Table of Contents                                                     :TOC:
- [[#emacs-initialization][Emacs initialization]]
- [[#packages][Packages]]
  - [[#sources][Sources]]
  - [[#setup][Setup]]
- [[#general-configuration][General Configuration]]
  - [[#misc][Misc]]
  - [[#scratch-buffer][Scratch Buffer]]
  - [[#user-interface][User Interface]]
  - [[#key-bindings][Key Bindings]]
  - [[#backups][Backups]]
  - [[#buffers][Buffers]]
  - [[#sessions][Sessions]]
  - [[#typing-and-spelling][Typing and Spelling]]
  - [[#file-editing][File Editing]]
- [[#navigation][Navigation]]
  - [[#general][General]]
  - [[#imenu][Imenu]]
  - [[#dired][Dired]]
  - [[#projectile][Projectile]]
  - [[#search][Search]]
  - [[#treemacs][Treemacs]]
- [[#org-mode][Org Mode]]
- [[#coding][Coding]]
  - [[#misc-1][Misc]]
  - [[#python][Python]]
  - [[#web-development][Web Development]]
  - [[#lisp][Lisp]]
  - [[#magit][Magit]]
  - [[#diff-hl][diff-hl]]
  - [[#yaml][YAML]]
- [[#games][Games]]
  - [[#nethack][Nethack]]
- [[#color-theme][Color Theme]]
- [[#wrapup][Wrapup]]

* Emacs initialization

Set the initial value of the load-path
#+BEGIN_SRC emacs-lisp
(setq load-path
      (append load-path
         '("/usr/local/share/emacs/site-lisp")))

#+END_SRC

Add /opt/local/bin to the exec-path. Aspell, which is used by
flyspell-mode, is installed here by MacPorts on OS X.
#+BEGIN_SRC emacs-lisp
(setq exec-path
      (append exec-path
        '("/opt/local/bin")))
#+END_SRC

Third party packages go here
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp")
#+END_SRC

Start the Emacs server
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

* Packages
** Sources

#+BEGIN_SRC emacs-lisp
(require 'package)

(package-initialize)

(defmacro when-package-installed (package-name &rest body)
  `(if (package-installed-p ,package-name)
     (progn ,@body)
     (warn "package %s is not installed" ,package-name)))
(setplist 'when-package-installed '(lisp-indent-function defun))
#+END_SRC

Add the Marmalade and MELPA external repos to ELPA
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
#+END_SRC

org-mode archives.  provides packages org and org-plus-contrib
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

** Setup

Configure use-package
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
;; Ensure that packages are installed automatically if not already present on your system
(setq use-package-always-ensure t)
;; Packages that take longer than 0.1s to load are logged in the *Messages* buffer
(setq use-package-verbose t)
#+END_SRC

Use Paradox for modernizing the package menu
#+BEGIN_SRC emacs-lisp
(use-package paradox
  :init
  (setq paradox-github-token t)
  (setq paradox-execute-asynchronously t)
  :config
  (paradox-enable))
#+END_SRC

* General Configuration
** Misc

Change 'yes or no' prompt to 'y or n' prompts
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Stop at the end of a file when moving the cursor down, don't just add lines
#+BEGIN_SRC emacs-lisp
(setq next-line-add-newlines nil)
#+END_SRC

TODO: Is there a better section for this?
makes killing/yanking interact with clipboard X11 selection
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

Flash the frame to represent a bell rather than play a sound
#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

Always show trailing whitespace and tabs, but don't show a glyph for tabs
#+BEGIN_SRC emacs-lisp
(setq whitespace-style
      '(face empty tabs tab-mark trailing))
(setq whitespace-display-mappings
      '(
        (tab-mark 9 [9])
        ))
(global-whitespace-mode 1)
#+END_SRC

Enable visual-line-mode, which (among other things) makes lines wrap at word boundaries
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

Disable the startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

Allow functions to operate on the current line when they would normally operate on the region,
eg kill-region when no region is selected will delete the current line.
See http://www.emacswiki.org/WholeLineOrRegion#toc3
#+BEGIN_SRC emacs-lisp
(whole-line-or-region-mode t)
#+END_SRC

auto-save buffers when switching between buffers or when an Emacs frame lose focus
#+BEGIN_SRC emacs-lisp
(use-package super-save
   :config
(super-save-mode +1))
#+END_SRC

Avoid "Symbolic link to Git-controlled source file; follow link?" prompt
by automatically answering "Yes". This only works when opening up new files.
It does not apply to existing files that need to be opened on startup
due to session saving.
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

** Scratch Buffer

Save the scratch buffer when Emacs quits
See http://dorophone.blogspot.fr/2011/11/how-to-make-emacs-scratch-buffer.html

#+BEGIN_SRC emacs-lisp

(defvar persistent-scratch-filename
    "~/.emacs.d/emacs-persistent-scratch"
    "Location of *scratch* file contents for persistent-scratch.")

(defun save-persistent-scratch ()
  "Write the contents of *scratch* to the file name
  PERSISTENT-SCRATCH-FILENAME, making a backup copy in
  PERSISTENT-SCRATCH-BACKUP-DIRECTORY."
  (with-current-buffer (get-buffer "*scratch*")
    (write-region (point-min) (point-max)
                  persistent-scratch-filename)))

(defun load-persistent-scratch ()
  "Load the contents of PERSISTENT-SCRATCH-FILENAME into the
  scratch buffer, clearing its contents first."
  (if (file-exists-p persistent-scratch-filename)
      (with-current-buffer (get-buffer "*scratch*")
        (delete-region (point-min) (point-max))
        (shell-command (format "cat %s" persistent-scratch-filename) (current-buffer)))))

(push #'save-persistent-scratch kill-emacs-hook)

(load-persistent-scratch)

#+END_SRC

** User Interface

Display the cursor's column number
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

Display the buffer size
#+BEGIN_SRC emacs-lisp
(setq size-indication-mode t)
#+END_SRC

Enable mouse scroller on vertical scroll bar
#+BEGIN_SRC emacs-lisp
(global-set-key [vertical-scroll-bar mouse-4] 'scroll-down)
(global-set-key [vertical-scroll-bar mouse-5] 'scroll-up)
#+END_SRC

Enable mouse scroller in active window
#+BEGIN_SRC emacs-lisp
(global-set-key [mouse-4] 'scroll-down)
(global-set-key [mouse-5] 'scroll-up)
#+END_SRC

Enable wheelmouse support
#+BEGIN_SRC emacs-lisp
(cond (window-system
       (mwheel-install)
))
#+END_SRC

Set the fonts.
On "OS X", set the default font to "Monaco 18"
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 140)

(when (equal system-type 'darwin)
  (set-face-attribute 'default nil :font "Monaco 18")
  )
#+END_SRC

Window configuration
#+BEGIN_SRC emacs-lisp
(when window-system
  (mouse-wheel-mode t)    ; enable mouse wheel support
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (tooltip-mode t)        ; show tooltips
  (tool-bar-mode -1)      ; don't show the toolbar
  (blink-cursor-mode -1)  ; don't blink the cursor
  )
#+END_SRC

Don't underline highlighted text
#+BEGIN_SRC emacs-lisp
(set-face-underline-p 'highlight nil)
#+END_SRC

Use "delight" to hide certain modes from the Modeline
#+BEGIN_SRC emacs-lisp
(use-package delight
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :delight
  (global-whitespace-mode)
  (visual-line-mode)
  (whole-line-or-region-mode)
)
#+END_SRC

Mode line format
I use Donald Ephraim Curtis' version of powerline
https://github.com/milkypostman/powerline
I've made a few modifications, located in the following directory
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :init
  (add-to-list 'load-path "~/.emacs.d/vendor/emacs-powerline")
  :config
  (powerline-default-theme))
#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp
(global-set-key (quote [f1]) 'toggle-org-return-key)
(global-set-key (quote [f2]) 'query-replace)
(global-set-key (quote [f4]) 'org-footnote-action)
(global-set-key (quote [f5]) 'revert-buffer-no-confirm)
(global-set-key (quote [f8]) 'projectile-find-file)
(global-set-key (quote [f9]) 'eval-region)
#+END_SRC

Rebind "expand-region"
http://endlessparentheses.com/where-do-you-bind-expand-region-.html?source=rss
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC

** Backups

backup file management
#+BEGIN_SRC emacs-lisp
(defvar backup-dir (expand-file-name ".backups" user-emacs-directory))

(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist (list (cons "." backup-dir))
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups
#+END_SRC

** Buffers

*** General

Uniquify changes conflicting buffer names from file<2> etc
#+BEGIN_SRC emacs-lisp
(use-package uniquify
   :ensure nil
   :config
   (setq uniquify-buffer-name-style 'forward)
   (setq uniquify-separator "/")
   ;; Rename after killing uniquified
   (setq uniquify-after-kill-buffer-p t)
   ;; Don't muck with special buffers
   (setq uniquify-ignore-buffers-re "^\\*"))
#+END_SRC

By default sort the buffer list by column 'Mode'
#+BEGIN_SRC emacs-lisp
(setq Buffer-menu-sort-column 4)
#+END_SRC

Focus the buffer window when listing the buffers
#+BEGIN_SRC emacs-lisp
(define-key global-map [remap list-buffers] 'buffer-menu-other-window)
#+END_SRC

*** Ibuffer

Use Ibuffer for buffer list
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

Create custom Ibuffer groups
#+BEGIN_SRC emacs-lisp
(setq ibuffer-saved-filter-groups
      '(("home"
         ("Org" (or (mode . org-mode)
                    (filename . "OrgMode")))
         ("Web" (or (mode . web-mode)
                    (name . ".css")))
         ("Python" (or (mode . python-mode)
                       (filename . "LaTeXMode")))
         ("Helm" (name . "helm"))
         ("Dired" (mode . dired-mode))
         ("Elisp" (mode . emacs-lisp-mode))
         ("Magit" (name . "magit"))
         ("Emacs" (or
                   (name . "^\\*scratch\\*$")
                   (name . "^\\*Messages\\*$")))
         ("Text" (or (name . ".txt")
                     (name . ".md")
                     (name . ".xml"))))))

(add-hook 'ibuffer-mode-hook
    '(lambda ()
        (ibuffer-switch-to-saved-filter-groups "home")))
#+END_SRC

Customize the column widths
#+BEGIN_SRC emacs-lisp
(setq ibuffer-formats
      '((mark modified read-only " "
              (name 30 30 :left :elide) ; change: 30s were originally 18s
              " "
              (size 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " " filename-and-process)
        (mark " "
              (name 16 -1)
              " " filename)))
#+END_SRC

Enabling this lets you delete buffers without confirmation
#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC

** Sessions

save my place in files between sessions
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :config
  (setq save-place-file (expand-file-name ".saveplaces" user-emacs-directory))
  ;; activate it for all buffers
  (setq-default save-place t)
)
#+END_SRC

Automatically save and restore sessions
#+BEGIN_SRC emacs-lisp
(desktop-save-mode t)
#+END_SRC

Store the session file here
#+BEGIN_SRC emacs-lisp
(setq desktop-dirname "~/.emacs.d/")
(setq desktop-path (list desktop-dirname))
#+END_SRC

Save mini-buffer history between sessions
#+BEGIN_SRC emacs-lisp
(setq savehist-additional-variables        ;; also save...
  '(search-ring regexp-search-ring)    ;; ... my search entries
  savehist-file "~/.emacs.d/savehist") ;; keep my home clean
(savehist-mode t)                          ;; do customization before activate
#+END_SRC
** Typing and Spelling

Use abbrev mode to correct often misspelled words
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :defer 1
  :ensure nil
  :custom
  (abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))
  (abbrev-mode 1)
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))
  :delight)
#+END_SRC

** File Editing
*** Tramp

Decrease tramp's verbosity level
#+BEGIN_SRC emacs-lisp
(setq tramp-verbose 2)
#+END_SRC
* Navigation
** General

The <home> and <end> keys should move to the beginning and end of the buffer, respectively
#+BEGIN_SRC emacs-lisp
(global-set-key [home] 'beginning-of-buffer)
(global-set-key [end] 'end-of-buffer)
#+END_SRC

Window navigation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x <left>") 'windmove-left)
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <down>") 'windmove-down)
#+END_SRC

create a list of recently opened files
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (recentf-mode t))
#+END_SRC

Helm Config
#+BEGIN_SRC emacs-lisp
(use-package helm
  :delight
  :ensure t
  :bind (("C-x C-f" . helm-find-files))
  :config
  (helm-mode 1))
#+END_SRC

Auto refresh buffers, but be quiet about it
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :delight auto-revert-mode
  :config
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil))
#+END_SRC

** Imenu

Automatically use Imenu, as needed
#+BEGIN_SRC emacs-lisp
(defun try-to-add-imenu ()
  (condition-case nil (imenu-add-to-menubar "Functions") (error nil)))
(add-hook 'font-lock-mode-hook 'try-to-add-imenu)
#+END_SRC

Imenu: display 50 items in each submenu
#+BEGIN_SRC emacs-lisp
(setq imenu-max-items 50)
#+END_SRC

Imenu: sort functions alphabetically
#+BEGIN_SRC emacs-lisp
(setq imenu-sort-function 'imenu--sort-by-name)
#+END_SRC

Rescan the buffer automatically for new functions
#+BEGIN_SRC emacs-lisp
(setq imenu-auto-rescan t)
#+END_SRC

** Dired

#+BEGIN_SRC emacs-lisp
(use-package diredfl
  :ensure t
  :config
  ;; Don't disable "dired-find-alternate-file"
  (put 'dired-find-alternate-file 'disabled nil)
  ;; Hilight the current line in dired mode
  (add-hook 'dired-mode-hook 'hl-line-mode))
#+END_SRC
** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (use-package helm-projectile
      :ensure t
      :config
      (helm-projectile-on))
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
#+END_SRC

** Search
*** The Silver Searcher

ag.el is a frontend to the Silver Searcher.
This requires installation of the "ag" binary.
#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag
  :init
  (setq ag-highlight-search 't)
  :config
  ;; Focus the search buffer after a search
  (add-hook 'ag-search-finished-hook (lambda () (pop-to-buffer next-error-last-buffer))))
#+END_SRC
** Treemacs

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5))

  (treemacs-follow-mode nil)
    :bind
      (:map global-map
        ([f7] . treemacs))
)

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :config
    ;; Turn on org-indent-mode for all files
    (setq org-startup-indented t)
    ;; Don't insert blank lines before new entries/items
    (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
    ;; Hit <RETURN> to follow the link at point
    (setq org-return-follows-link t)
    ;; By default, the return key inserts a new heading
    ;; (add-hook 'org-mode-hook
    ;; (lambda ()
    ;;   (define-key org-mode-map (kbd "RET") 'org-insert-heading-respect-content)))
    ;; Add an intermediate 'IN PROGRESS' todo state
    (setq org-todo-keywords '((sequence "TODO" "IN PROGRESS" "|" "DONE")))
    ;; TODO statistics covers all entries in the subtree, not just direct children
    (setq org-hierarchical-todo-statistics nil)

    ;; With this set, hitting 's' at the beginning of a headline will narrow to the
    ;;  current subtree. Hitting 's' again will unnarrow the buffer.
    (setq org-use-speed-commands t)

    ;; Babel Mode
    ;; Some initial languages we want org-babel to support
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((shell . t)
                                  (python . t)
                                  (R . t)
                                  (ruby . t)
                                  (ditaa . t)
                                  (dot . t)
                                  (octave . t)
                                  (sql . t)
                                  (sqlite . t)
                                  (perl . t)))
    ;; Use bash (rather than the default sh) as the command to invoke a shell
    (setq org-babel-sh-command "bash")
    ;; Turn on native code fontification
    (setq org-src-fontify-natively t)
    ;; Don't confirm before evaluating code
    (setq org-confirm-babel-evaluate nil)

    ;; Capture Mode
    ;; Set notes file and key binding
    (setq org-default-notes-file (concat "~/Dropbox/life.org"))
    (define-key global-map "\C-cc" 'org-capture)

    ;; Customize the faces. I prefer the font sizes to be consistent across levels
    (set-face-attribute 'org-level-1 nil :height 1.0)
    (set-face-attribute 'org-level-2 nil :height 1.0)
    (set-face-attribute 'org-level-3 nil :height 1.0)
    (set-face-attribute 'org-level-4 nil :height 1.0)
    (set-face-attribute 'org-level-5 nil :height 1.0)
    (set-face-attribute 'org-level-6 nil :height 1.0)
    (set-face-attribute 'org-level-7 nil :height 1.0)
    (set-face-attribute 'org-level-8 nil :height 1.0)

    ;; TABs in code blocks should act as if they were issued in the language major mode buffer
    (setq org-src-tab-acts-natively t)

    :delight org-indent-mode
  )
#+END_SRC

Include a Table of Contents, primarily for the benefit of Github.
The TOC automatically gets updated when the buffer is saved under the heading with the "TOC" tag.
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :hook
  (org-mode . toc-org-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-contacts
  :ensure nil
  :after org)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :ensure nil
  :after org
  :preface
  (defvar my/org-contacts-template "* %(org-contacts-template-name)
:PROPERTIES:
:ADDRESS: %^{Address}
:BIRTHDAY: %^{Birthday (yyyy-mm-dd)}
:EMAIL: %(org-contacts-template-email)
:HOME_PHONE: %^{Home Phone}
:WORK_PHONE: %^{Work Phone}
:URL: %^{Url}
:NOTE: %^{Note}
:END:" "Template for org-contacts.")
  :custom
  (org-capture-templates
      `(("c" "Contact" entry (file+headline "~/docs/personal/contacts.org" "Contacts"),
      my/org-contacts-template
     :empty-lines 0)
  ("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
  "* TODO %?  %t  %^g"))))
#+END_SRC

Show org-mode bullets and ellipses as UTF-8 characters
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :init
  (setq org-ellipsis " ⬎")
  (set-face-attribute 'org-ellipsis nil :underline nil)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-fancy-priorities
  :diminish
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("MED", "HIGH", "LOW")))
#+END_SRC

Define a function which toggles the return key binding between
'org-return' and 'org-insert-respect-content'
#+BEGIN_SRC emacs-lisp
(defun toggle-org-return-key ()
  (interactive)
  (if (string= (key-binding (kbd "RET")) "org-return")
    (define-key org-mode-map (kbd "RET") 'org-insert-heading-respect-content)
    (define-key org-mode-map (kbd "RET") 'org-return))
  )
(global-set-key (quote [f1]) 'toggle-org-return-key)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
  (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC

Automatically add a timestamp property to new TODO items, based on this:
https://stackoverflow.com/questions/12262220/add-created-date-property-to-todos-in-org-mode

#+BEGIN_SRC emacs-lisp
(use-package org-expiry
  :ensure org-plus-contrib
  :config
  (setq
    org-expiry-created-property-name "CREATED" ; Name of property when an item is created
    org-expiry-inactive-timestamps   t         ; Don't have everything in the agenda view
  ))

(defun mrb/insert-created-timestamp()
  "Insert a CREATED property using org-expiry.el for TODO entries"
  (org-expiry-insert-created)
  (org-back-to-heading)
  (org-end-of-line)
)

;; Whenever a TODO entry is created, I want a timestamp
(defadvice org-todo (after mrb/created-timestamp-advice activate)
  "Insert a CREATED property using org-expiry.el for TODO entries"
  (mrb/insert-created-timestamp)
)
;; Make it active
(ad-activate 'org-todo)
#+END_SRC

Disable displaying the outline path in the echo area
#+BEGIN_SRC emacs-lisp
(remove-hook 'org-mode-hook 'org-eldoc-load)
#+END_SRC

Use org-cliplink to insert org-mode links from clipboard.
Bind to F3.
#+BEGIN_SRC emacs-lisp
(use-package org-cliplink
  :config
  (global-set-key (quote [f3]) 'org-cliplink))
#+END_SRC

* Coding
** Misc

Enable auto-complete mode globally
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :config
  (global-auto-complete-mode t)
  :delight)
#+END_SRC

hilight matching pairs of parentheses and other characters
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

Insert parentheses, braces, quotes and the like in matching pairs
#+BEGIN_SRC emacs-lisp
(cond
 ((string-match "GNU Emacs 24" (emacs-version))
  (electric-pair-mode)
  )
 )
#+END_SRC

C support
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
  (lambda ()
    (c-set-style "k&r")
    (setq c-basic-offset 4)))
#+END_SRC

Perl support
cperl-mode indentation offset
#+BEGIN_SRC emacs-lisp
(setq cperl-indent-level 4)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.pl\\'" . cperl-mode))
(add-to-list 'auto-mode-alist '("\\.pm\\'" . cperl-mode))
#+END_SRC

for re-builder mode, set the syntax to 'string' to avoid extra escaping
#+BEGIN_SRC emacs-lisp
(setq reb-re-syntax 'string)
#+END_SRC

Use apache-mode when editing Apache config files
#+BEGIN_SRC emacs-lisp
(autoload 'apache-mode "apache-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
(add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  . apache-mode))
#+END_SRC

Hilight Postgres keywords in SQL mode
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-mode-hook
          (lambda ()
            (sql-highlight-postgres-keywords)))
#+END_SRC

** Python

#+begin_example
Install Elpy, the Emacs Lisp Python Environment

Populate a virtualenv with the required Python packages:

    $ python3 -m venv ~/dev/envs/elpy
    $ . ~/dev/envs/elpy/bin/activate
    $ pip install autopep8 epc flake8 importmagic jedi rope yapf
#+end_example

Use flycheck for on-the-fly syntax checking
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :init
  (pyvenv-activate "~/dev/envs/elpy/")
  :config
  ;; Stop elpy from enabling highlight-indentation-mode
  (delete `elpy-module-highlight-indentation elpy-modules)

  ;; Use flycheck rather than the default flymake
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; Use jedi for the backend rather than rope
  (setq elpy-rpc-backend "jedi")

  (elpy-enable))
#+END_SRC

Use isort to automatically sort Python imports on save.
To install isort: pip install isort

#+BEGIN_SRC emacs-lisp
(use-package py-isort
  :config
  (add-hook 'before-save-hook 'py-isort-before-save))
#+END_SRC

Tabs

Set the default tab width to 4
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

Don't use tabs for indentation
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** Web Development

Use HTML Mode for html, autohandler, and dhandler files
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\(auto\\|d\\)handler\\'" . html-mode))
#+END_SRC

I use web-mode for Django development
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  :config
  (setq web-mode-engines-alist
      '(("django"    . "\\.html\\'")))
  (setq web-mode-markup-indent-offset 4)
  (setq web-mode-css-indent-offset 4)
  (setq web-mode-code-indent-offset 4)
  (setq web-mode-indent-style 4)
  (setq web-mode-style-padding 4)
  (setq web-mode-script-padding 4)
  (setq web-mode-enable-css-colorization t))
#+END_SRC

Use Rainbow minor mode when in CSS mode
#+BEGIN_SRC emacs-lisp
(add-hook 'css-mode-hook 'rainbow-mode)
#+END_SRC

Use C-Style indentation in CSS mode
#+BEGIN_SRC emacs-lisp
(setq cssm-indent-function #'cssm-c-style-indenter)
#+END_SRC

** Lisp

Add more keywords for font-lock hilighlighting
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'lisp-mode
  '(("\\<\\(add-hook\\|setq\\|autoload\\|add-to-list\\|setq-default\\)\\>" . font-lock-keyword-face)))
#+END_SRC

If the matching paren is offscreen, show the matching line in the echo area
See http://www.emacswiki.org/emacs/ShowParenMode
#+BEGIN_SRC emacs-lisp
(defadvice show-paren-function
      (after show-matching-paren-offscreen activate)
      "If the matching paren is offscreen, show the matching line in the
        echo area. Has no effect if the character before point is not of
        the syntax class ')'."
      (interactive)
      (let* ((cb (char-before (point)))
             (matching-text (and cb
                                 (char-equal (char-syntax cb) ?\) )
                                 (blink-matching-open))))
        (when matching-text (message matching-text))))
#+END_SRC

** Magit

support for Magit, which provides nice Git integration with Emacs
#+BEGIN_SRC emacs-lisp
(use-package magit
    :init
    (setq magit-log-margin '(t "%b %d, %Y " magit-log-margin-width t 21))
)
#+END_SRC

Custom key binding for the often-used "magit-status" command
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

full screen magit-status
http://whattheemacsd.com/setup-magit.el-01.html
#+BEGIN_SRC emacs-lisp
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))

(define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
#+END_SRC

Always display the process buffer
#+BEGIN_SRC emacs-lisp
(defun auto-display-magit-process-buffer (&rest args)
  "Automatically display the process buffer when it is updated."
  (let ((magit-display-buffer-noselect t))
    (magit-process-buffer)))

(advice-add 'magit-process-insert-section :before #'auto-display-magit-process-buffer)
#+END_SRC
** diff-hl

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :ensure t
  :init
  (global-diff-hl-mode)
)
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode (("\\.yaml\\'" . yaml-mode)
         ("\\.yml\\'"       . yaml-mode)))
#+END_SRC

* Games
** Nethack

#+BEGIN_SRC emacs-lisp
(add-hook 'nethack-map-mode-hook
  (lambda ()
    (define-key nh-map-mode-map (kbd "<left>") 'nethack-command-west)
    (define-key nh-map-mode-map (kbd "<up>") 'nethack-command-north)
    (define-key nh-map-mode-map (kbd "<down>") 'nethack-command-south)
    (define-key nh-map-mode-map (kbd "<right>") 'nethack-command-east)
    (define-key nh-map-mode-map (kbd "<kp-add>") 'nethack-command-northwest)
    (define-key nh-map-mode-map (kbd "<prior>") 'nethack-command-northeast)
    (define-key nh-map-mode-map (kbd "<end>") 'nethack-command-southwest)
    (define-key nh-map-mode-map (kbd "<next>") 'nethack-command-southeast)
))

(add-to-list 'load-path "~/.emacs.d/elisp/nethack/")
(autoload 'nethack "nethack" "Play Nethack." t)
#+END_SRC

You'll need to apt-get this if using Ubuntu or Debian
#+BEGIN_SRC emacs-lisp
(setq nethack-program "/usr/games/nethack-lisp")
#+END_SRC

* Color Theme

This should be run near the end, since custom face attributes are set in current-theme.el which
all already need to be defined.

I store my custom color themes here
#+BEGIN_SRC emacs-lisp
(setq custom-theme-directory "~/.emacs.d/themes/")
#+END_SRC

Load the current theme
current-theme.el is a symlink to the currently used theme
#+BEGIN_SRC emacs-lisp
(let ((current-theme "~/.emacs.d/themes/current-theme.el"))
(when (file-exists-p current-theme)
   (load-file current-theme))
)
#+END_SRC

* Wrapup

Local or experimental settings are stored here
#+BEGIN_SRC emacs-lisp
(let ((local-settings "~/.emacs-local"))
(when (file-exists-p local-settings)
  (load-file local-settings))
)
#+END_SRC
