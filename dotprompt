# Master .prompt file for setting the BASH prompt
#  by F. Jerrell Schivers
#  based on work by KrON from windowmaker on IRC and Spidey 08/06

function set_prompt {

    EXITSTATUS="$?"

    if [ "$TERM" == "dumb" ]; then
	return
    fi

    # For a lighter version of any of these colors,
    #  replace the '0' with '1', eg turn green to
    #  light green 0;32m => 1;32m

    local color_off="\[\e[m\]"
    local BOLD="\[\e[1m\]"
    local NORMAL="\[\e[0m\]"
    local black="\[\e[30m\]"
    local red="\[\e[31m\]"
    local yellow="\[\e[33m\]"
    local green="\[\e[1;32m\]"
    local cyan="\[\e[1;36m\]"
    local white="\[\e[37m\]"
    local blue="\[\e[34m\]"
    local purple="\[\e[35m\]"
    local brown="\[\e[33m\]"
    local grad=`tty|cut -d/ -f3`

    local bakred='\[\e[41m\]'   # Red Background

    ERROR=

    # If the last command resulted in an error, prominently display the exit status
    if [ "$EXITSTATUS" -ne "0" ]; then
	    ERROR=" $BOLD$white$bakred$EXITSTATUS$color_off"
    fi

    # Capture the number of jobs
    JOBS=`jobs | wc -l | awk '{print $1}'`

    if [ $JOBS -ne 0 ]; then
	if [ $JOBS -eq 1 ]; then
	    JOBS=" $green($BOLD${red}1 job$color_off$green)"
	else
	    JOBS=" $green($BOLD$red$JOBS jobs$color_off$green)"
	fi
    else
	JOBS=""
    fi

    # Are we running in a screen?
    [ "$STY" != "" ] && SFLAG='-SCR' || SFLAG=''

    # Set SSH_FLAG only if this is a remote (ssh) connection.  This will be used in the prompt
    local SSH_IP=`echo $SSH_CLIENT | awk '{ print $1 }'`
    if [ $SSH_IP ]; then
	local SSH_FLAG="$red@$yellow\h"
    fi

    # When displaying the PWD in the prompt, we want to truncate it so avoid displaying excessively long paths
    MAXLENGTH=100
    MYPWD=`echo $PWD | sed "s@$HOME@~@g"`  # If we're in our home dir, then use ~ for $HOME
    LENGTH=${#MYPWD}

    if [ $(( LENGTH )) -gt $MAXLENGTH ] ; then
	MYPWD=${MYPWD:$LENGTH-$MAXLENGTH:$MAXLENGTH}
	MYPWD="...$MYPWD"
    fi

    GIT=
    if [ `type -t __git_ps1` ]; then
        GIT="$yellow$(__git_ps1 ' (%s)')"
    fi

	# Determine active Python virtualenv details.
	if test -z "$VIRTUAL_ENV" ; then
		PYTHON_VIRTUALENV=""
	else
		PYTHON_VIRTUALENV="${blue}[`basename \"$VIRTUAL_ENV\"`]${color_off}"
	fi

#    export PS1="$purple- $red\$(date +%l:%M%P\ %m/%d) $green$MYPWD\n$purple- $brown\u$SSH_FLAG$green$JOBS$SFLAG$ERROR$yellow $purple-> $white$NORMAL"

    export PS1="$purple┌ $red\$(date +%l:%M%P\ %m/%d) $PYTHON_VIRTUALENV $green$MYPWD\n$purple└ $brown\u$SSH_FLAG$green$JOBS$SFLAG$ERROR$GIT $purple-> $white$NORMAL"

    export P2="> "

}

PROMPT_COMMAND=set_prompt


# Colors:
#
# \[\e[31m\]  --  yellow
# \[\e[32m\]  --  green
# \[\e[33m\]  --  red
# \[\e[34m\]  --  blue
# \[\e[35m\]  --  purple
# \[\e[36m\]  --  cyan
# \[\e[37m\]  --  white
#
# Attributes:
#
# Bold -- 1;  (eg \[\e[1;31m\] for bold red)
#
# Special Characters:
#
# \304  --  (long dash)
# \371  --  (centered dot, large)
# \372  --  (centered dot, small)
# \332  --  (upper-left-hand corner piece)
# \300  --  (lower-left-hand corner piece)
